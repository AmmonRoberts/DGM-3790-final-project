{"version":3,"sources":["components/CountryData.js","components/FancySearch.js","components/SearchForm.js","components/CountryCards.js"],"names":["CountryData","props","classes","makeStyles","theme","countryCard","width","margin","padding","countryData","height","cursor","paddingLeft","fontSize","display","justifyContent","useStyles","useState","open","setOpen","className","Card","onClick","country","name","subregion","region","capital","currency_symbol","currency","MyCountryModal","openState","handleClose","FancySearch","Autocomplete","id","sx","options","countries","getOptionLabel","renderInput","params","TextField","label","renderOption","inputValue","matches","match","parts","parse","map","part","index","key","style","fontWeight","highlight","text","SearchForm","regionFilterOptions","Set","CountriesJson","item","FormControl","variant","InputLabel","Select","labelId","value","filteredRegion","onChange","filterRegionChangeHandler","MenuItem","sort","primaryText","filteredCountries","CountryCards","useCountryContext","setFilteredRegion","filter","event","target","rows","counter","forEach","push","createRow","row"],"mappings":"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","file":"static/js/4.7bbc5fc1.chunk.js","sourcesContent":["import { Card } from '@mui/material';\nimport MoneyIcon from '@mui/icons-material/Money';\nimport LocationCityIcon from '@mui/icons-material/LocationCity';\nimport MyCountryModal from \"./MyCountryModal\";\nimport React from 'react';\nimport { useState } from 'react';\nimport { makeStyles } from '@mui/styles';\n\n\nconst CountryData = (props) => {\n\n    const useStyles = makeStyles((theme) => ({\n        countryCard: {\n            width: '15em',\n            margin: 'auto',\n            padding: '.5em'\n        },\n        countryData: {\n            height: '200px',\n            cursor: 'pointer',\n            \"& p\": {\n                margin: '5px',\n                paddingLeft: '10px',\n                fontSize: '14px',\n                display: 'flex',\n                justifyContent: 'flex-start'\n            },\n            \"& h4\": {\n                margin: '5px',\n                fontSize: '18px',\n                display: 'flex',\n                justifyContent: 'flex-start'\n            }\n        },\n    }));\n\n    const classes = useStyles();\n\n    const [open, setOpen] = useState(false);\n\n    const handleOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div\n            className={classes.countryCard}>\n            <Card\n                className={classes.countryData}\n                onClick={handleOpen}\n            >\n                <h4>{props.country.name}</h4>\n                <p>{props.country.subregion === \"\" ? \"N/A\" : props.country.subregion}, {props.country.region === \"\" ? \"N/A\" : props.country.region}</p>\n                <p><LocationCityIcon />{props.country.capital}</p>\n                <p><MoneyIcon />{props.country.currency_symbol} ({props.country.currency})</p>\n            </Card>\n            <MyCountryModal openState={open} handleClose={handleClose} country={props.country} />\n        </div>\n    );\n\n};\n\nexport default CountryData;","import TextField from '@mui/material/TextField';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\nimport React from 'react';\n// import { useState } from 'react';\n// import MyModal from './MyModal';\n\n\nconst FancySearch = (props) => {\n    return (\n        <Autocomplete\n            id=\"country-search\"\n            sx={{ width: 300 }}\n            options={props.countries}\n            getOptionLabel={(country) => country.name}\n            renderInput={(params) => (\n                <TextField {...params}\n                    label=\"Countries\" margin=\"normal\" />\n            )}\n            renderOption={(props, country, { inputValue }) => {\n                const matches = match(country.name, inputValue);\n                const parts = parse(country.name, matches);\n\n                return (\n                    <li {...props}>\n                        <div>\n                            {parts.map((part, index) => (\n                                <span\n                                    // onClick={handleOpen}\n                                    key={index}\n                                    style={{\n                                        fontWeight: part.highlight ? 700 : 400,\n                                    }}>\n                                    {part.text}\n                                    {/* <MyModal openState={open} handleClose={handleClose} country={option} /> */}\n                                </span>\n                            ))}\n                        </div>\n                    </li>\n                );\n            }}\n        />\n    );\n}\n\n\nexport default FancySearch;","import InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport React from 'react';\nimport FancySearch from './FancySearch';\n\nconst SearchForm = (props) => {\n    const regionFilterOptions = [...new Set(props.CountriesJson.map(item => item.region))];\n\n    return (\n\n        <FormControl variant=\"filled\" >\n            <InputLabel id=\"simple-select-outlined-label\">Region</InputLabel>\n            <Select\n                labelId=\"simple-select-outlined-label\"\n                id=\"simple-select-outlined\"\n                value={props.filteredRegion}\n                onChange={props.filterRegionChangeHandler}\n                label=\"Region\">\n                <MenuItem value=\"None\">\n                    <em>None</em>\n                </MenuItem>\n                {regionFilterOptions.sort().map((region, index) =>\n                    <MenuItem\n                        key={index}\n                        value={region === \"\" ? \"N/A\" : region}\n                        primaryText={region === \"\" ? \"N/A\" : region}>\n                        <em>{\n                            region === \"\" ? \"N/A\" : region}\n                        </em>\n                    </MenuItem>\n                )}\n            </Select>\n            <FancySearch countries={props.filteredCountries}\n            // searchString={searchString} \n            />\n        </FormControl>\n    );\n}\n\n\nexport default SearchForm;","import { useCountryContext } from '../Contexts/CountryContext';\nimport CountryData from './CountryData';\nimport { useState } from 'react';\nimport React from 'react';\nimport SearchForm from './SearchForm';\n\n\nconst CountryCards = (props) => {\n    const CountriesJson = useCountryContext();\n    // This is the problem with resetting the search string\n    // const [searchString, setSearchString] = useState(null);\n    const [filteredRegion, setFilteredRegion] = useState(\"None\");\n    const filterRegionChangeHandler = (event) => {\n        // setSearchString(null);\n        if (event.target.value === \"None\") {\n            setFilteredRegion(\"None\");\n        }\n        else {\n            setFilteredRegion(event.target.value);\n        }\n    }\n\n    const filteredCountries = CountriesJson.filter((country) => {\n        if (filteredRegion === \"None\") {\n            return CountriesJson\n        }\n        else if (filteredRegion === \"N/A\") {\n            return country.region === \"\";\n        }\n        else {\n            return country.region === filteredRegion;\n        }\n    })\n\n    const createRow = () => {\n        let rows = [];\n        let counter = 1;\n        filteredCountries.forEach((item, index) => {\n            rows[counter] = rows[counter] ? [...rows[counter]] : [];\n            if (index % 3 === 0 && index !== 0) {\n                counter++;\n                rows[counter] = rows[counter] ? [...rows[counter]] : [];\n                rows[counter].push(item);\n            } else {\n                rows[counter].push(item);\n            }\n        });\n\n        return rows;\n    }\n\n    return (\n        <div className=\"container\">\n            <SearchForm\n                filterRegionChangeHandler={filterRegionChangeHandler}\n                CountriesJson={CountriesJson}\n                filteredRegion={filteredRegion}\n                filteredCountries={filteredCountries}\n            />\n            {createRow().map((row) => {\n                return (\n                    <div className=\"row\">\n                        {\n                            row.map((country) => {\n                                return (<CountryData\n                                    country={country} />);\n                            })\n                        }\n                    </div>\n                )\n            })}\n        </div>\n    )\n};\n\nexport default CountryCards;"],"sourceRoot":""}